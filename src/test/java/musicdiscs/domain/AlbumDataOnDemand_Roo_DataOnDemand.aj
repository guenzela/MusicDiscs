// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package musicdiscs.domain;

import java.util.List;
import java.util.Random;
import musicdiscs.domain.Album;
import musicdiscs.domain.ArtistDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AlbumDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AlbumDataOnDemand: @Component;
    
    private Random AlbumDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Album> AlbumDataOnDemand.data;
    
    @Autowired
    private ArtistDataOnDemand AlbumDataOnDemand.artistDataOnDemand;
    
    public Album AlbumDataOnDemand.getNewTransientAlbum(int index) {
        musicdiscs.domain.Album obj = new musicdiscs.domain.Album();
        obj.setTitle("title_" + index);
        obj.setArtist(artistDataOnDemand.getRandomArtist());
        obj.setAlbumType("albumType_" + index);
        obj.setReleased(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setLength(new Integer(index).floatValue());
        obj.setLabel("label_" + index);
        obj.setVote(new Integer(index).floatValue());
        return obj;
    }
    
    public Album AlbumDataOnDemand.getSpecificAlbum(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Album obj = data.get(index);
        return Album.findAlbum(obj.getId());
    }
    
    public Album AlbumDataOnDemand.getRandomAlbum() {
        init();
        Album obj = data.get(rnd.nextInt(data.size()));
        return Album.findAlbum(obj.getId());
    }
    
    public boolean AlbumDataOnDemand.modifyAlbum(Album obj) {
        return false;
    }
    
    public void AlbumDataOnDemand.init() {
        data = musicdiscs.domain.Album.findAlbumEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Album' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<musicdiscs.domain.Album>();
        for (int i = 0; i < 10; i++) {
            musicdiscs.domain.Album obj = getNewTransientAlbum(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
